# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import mail_pb2 as mail__pb2


class MailManagerServiceStub(object):
  """函数
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendMail = channel.unary_unary(
        '/MailManagerService/SendMail',
        request_serializer=mail__pb2.SendTextMailRequest.SerializeToString,
        response_deserializer=mail__pb2.SendTextMailReply.FromString,
        )


class MailManagerServiceServicer(object):
  """函数
  """

  def SendMail(self, request, context):
    """发送邮件
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MailManagerServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendMail': grpc.unary_unary_rpc_method_handler(
          servicer.SendMail,
          request_deserializer=mail__pb2.SendTextMailRequest.FromString,
          response_serializer=mail__pb2.SendTextMailReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MailManagerService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
